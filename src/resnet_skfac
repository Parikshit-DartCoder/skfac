import torch
import torch.nn as nn
import torch.nn.functional as F

from src.skfac_layer import Conv2d_SKFAC_GPU, Dense_SKFAC_GPU

class ResidualBlock(nn.Module):
    expansion = 4

    def __init__(self, in_channel, out_channel, stride=1, damping=0.03, loss_scale=1, frequency=278, batch_size=32):
        super(ResidualBlock, self).__init__()

        channel = out_channel // self.expansion
        self.conv1 = Conv2d_SKFAC_GPU(in_channel, channel, kernel_size=1, stride=1)
        self.bn1 = nn.BatchNorm2d(channel)

        self.conv2 = Conv2d_SKFAC_GPU(channel, channel, kernel_size=3, stride=stride, padding=1)
        self.bn2 = nn.BatchNorm2d(channel)

        self.conv3 = Conv2d_SKFAC_GPU(channel, out_channel, kernel_size=1, stride=1)
        self.bn3 = nn.BatchNorm2d(out_channel)

        self.relu = nn.ReLU()

        self.down_sample = False

        if stride != 1 or in_channel != out_channel * self.expansion:
            self.down_sample = True
        self.down_sample_layer = None

        if self.down_sample:
            self.down_sample_layer = nn.Sequential(
                Conv2d_SKFAC_GPU(in_channel, out_channel * self.expansion, kernel_size=1, stride=stride),
                nn.BatchNorm2d(out_channel * self.expansion)
            )

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.down_sample:
            identity = self.down_sample_layer(identity)

        out += identity
        out = self.relu(out)

        return out

class ResNet(nn.Module):
    def __init__(self,
                 block,
                 layers,
                 num_classes=10,
                 damping=0.03,
                 loss_scale=1,
                 frequency=278,
                 batch_size=32,
                 include_top=True):
        super(ResNet, self).__init__()
        self.inplanes = 64
        self.include_top = include_top

        self.conv1 = Conv2d_SKFAC_GPU(3, 64, kernel_size=7, stride=2, padding=3)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU()
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)

        self.layer1 = self._make_layer(block, 64, layers[0], stride=1)
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)

        if self.include_top:
            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
            self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, Conv2d_SKFAC_GPU):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    def _make_layer(self, block, planes, blocks, stride=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                Conv2d_SKFAC_GPU(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride),
                nn.BatchNorm2d(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample=downsample))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes))

        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        if self.include_top:
            x = self.avgpool(x)
            x = torch.flatten(x, 1)
            x = self.fc(x)

        return x

def resnet50(class_num=10, damping=0.03, loss_scale=1, frequency=278, batch_size=32, include_top=True):
    return ResNet(ResidualBlock,
                  [3, 4, 6, 3],
                  num_classes=class_num,
                  damping=damping,
                  loss_scale=loss_scale,
                  frequency=frequency,
                  batch_size=batch_size,
                  include_top=include_top)
